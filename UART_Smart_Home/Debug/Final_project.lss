
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  0000073e  000007d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800140  00800140  000008b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118d  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fa  00000000  00000000  00001b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abb  00000000  00000000  00002487  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf6  00000000  00000000  00003679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000436f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e3       	ldi	r30, 0x3E	; 62
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 34       	cpi	r26, 0x40	; 64
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e4       	ldi	r26, 0x40	; 64
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 34       	cpi	r26, 0x46	; 70
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  8a:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_enumSetPortDirection>:
		break;
	default:
		LOC_enumState=dok_state;
	}
	return LOC_enumState;
}
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_enumSetPortDirection+0x16>
  96:	28 f0       	brcs	.+10     	; 0xa2 <DIO_enumSetPortDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	49 f0       	breq	.+18     	; 0xae <DIO_enumSetPortDirection+0x1c>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	51 f0       	breq	.+20     	; 0xb4 <DIO_enumSetPortDirection+0x22>
  a0:	0c c0       	rjmp	.+24     	; 0xba <DIO_enumSetPortDirection+0x28>
  a2:	6a bb       	out	0x1a, r22	; 26
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	08 95       	ret
  a8:	67 bb       	out	0x17, r22	; 23
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	08 95       	ret
  ae:	64 bb       	out	0x14, r22	; 20
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	08 95       	ret
  b4:	61 bb       	out	0x11, r22	; 17
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	08 95       	ret
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	08 95       	ret

000000be <DIO_enumSetPortValue>:
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	49 f0       	breq	.+18     	; 0xd4 <DIO_enumSetPortValue+0x16>
  c2:	28 f0       	brcs	.+10     	; 0xce <DIO_enumSetPortValue+0x10>
  c4:	82 30       	cpi	r24, 0x02	; 2
  c6:	49 f0       	breq	.+18     	; 0xda <DIO_enumSetPortValue+0x1c>
  c8:	83 30       	cpi	r24, 0x03	; 3
  ca:	51 f0       	breq	.+20     	; 0xe0 <DIO_enumSetPortValue+0x22>
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <DIO_enumSetPortValue+0x28>
  ce:	6b bb       	out	0x1b, r22	; 27
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	08 95       	ret
  d4:	68 bb       	out	0x18, r22	; 24
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	08 95       	ret
  da:	65 bb       	out	0x15, r22	; 21
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
  e0:	62 bb       	out	0x12, r22	; 18
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	08 95       	ret
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret

000000ea <DIO_enumSetPinDirection>:
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO_enumSetPinDirection+0x6>
  ee:	8e c0       	rjmp	.+284    	; 0x20c <DIO_enumSetPinDirection+0x122>
  f0:	61 30       	cpi	r22, 0x01	; 1
  f2:	49 f1       	breq	.+82     	; 0x146 <DIO_enumSetPinDirection+0x5c>
  f4:	38 f0       	brcs	.+14     	; 0x104 <DIO_enumSetPinDirection+0x1a>
  f6:	62 30       	cpi	r22, 0x02	; 2
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_enumSetPinDirection+0x12>
  fa:	46 c0       	rjmp	.+140    	; 0x188 <DIO_enumSetPinDirection+0x9e>
  fc:	63 30       	cpi	r22, 0x03	; 3
  fe:	09 f4       	brne	.+2      	; 0x102 <DIO_enumSetPinDirection+0x18>
 100:	64 c0       	rjmp	.+200    	; 0x1ca <DIO_enumSetPinDirection+0xe0>
 102:	86 c0       	rjmp	.+268    	; 0x210 <DIO_enumSetPinDirection+0x126>
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	71 f4       	brne	.+28     	; 0x124 <DIO_enumSetPinDirection+0x3a>
 108:	4a b3       	in	r20, 0x1a	; 26
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_enumSetPinDirection+0x2c>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_enumSetPinDirection+0x28>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	41 11       	cpse	r20, r1
 126:	76 c0       	rjmp	.+236    	; 0x214 <DIO_enumSetPinDirection+0x12a>
 128:	4a b3       	in	r20, 0x1a	; 26
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enumSetPinDirection+0x4c>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enumSetPinDirection+0x48>
 13a:	cb 01       	movw	r24, r22
 13c:	80 95       	com	r24
 13e:	84 23       	and	r24, r20
 140:	8a bb       	out	0x1a, r24	; 26
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	71 f4       	brne	.+28     	; 0x166 <DIO_enumSetPinDirection+0x7c>
 14a:	47 b3       	in	r20, 0x17	; 23
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_enumSetPinDirection+0x6e>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_enumSetPinDirection+0x6a>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	87 bb       	out	0x17, r24	; 23
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	08 95       	ret
 166:	41 11       	cpse	r20, r1
 168:	57 c0       	rjmp	.+174    	; 0x218 <DIO_enumSetPinDirection+0x12e>
 16a:	47 b3       	in	r20, 0x17	; 23
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_enumSetPinDirection+0x8e>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_enumSetPinDirection+0x8a>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	87 bb       	out	0x17, r24	; 23
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret
 188:	41 30       	cpi	r20, 0x01	; 1
 18a:	71 f4       	brne	.+28     	; 0x1a8 <DIO_enumSetPinDirection+0xbe>
 18c:	44 b3       	in	r20, 0x14	; 20
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_enumSetPinDirection+0xb0>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	8a 95       	dec	r24
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_enumSetPinDirection+0xac>
 19e:	cb 01       	movw	r24, r22
 1a0:	84 2b       	or	r24, r20
 1a2:	84 bb       	out	0x14, r24	; 20
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	08 95       	ret
 1a8:	41 11       	cpse	r20, r1
 1aa:	38 c0       	rjmp	.+112    	; 0x21c <DIO_enumSetPinDirection+0x132>
 1ac:	44 b3       	in	r20, 0x14	; 20
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_enumSetPinDirection+0xd0>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_enumSetPinDirection+0xcc>
 1be:	cb 01       	movw	r24, r22
 1c0:	80 95       	com	r24
 1c2:	84 23       	and	r24, r20
 1c4:	84 bb       	out	0x14, r24	; 20
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	08 95       	ret
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	71 f4       	brne	.+28     	; 0x1ea <DIO_enumSetPinDirection+0x100>
 1ce:	41 b3       	in	r20, 0x11	; 17
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_enumSetPinDirection+0xf2>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_enumSetPinDirection+0xee>
 1e0:	cb 01       	movw	r24, r22
 1e2:	84 2b       	or	r24, r20
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret
 1ea:	41 11       	cpse	r20, r1
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <DIO_enumSetPinDirection+0x136>
 1ee:	41 b3       	in	r20, 0x11	; 17
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_enumSetPinDirection+0x112>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	8a 95       	dec	r24
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_enumSetPinDirection+0x10e>
 200:	cb 01       	movw	r24, r22
 202:	80 95       	com	r24
 204:	84 23       	and	r24, r20
 206:	81 bb       	out	0x11, r24	; 17
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	08 95       	ret
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	08 95       	ret
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	08 95       	ret
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret

00000224 <DIO_enumSetPinValue>:
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	08 f0       	brcs	.+2      	; 0x22a <DIO_enumSetPinValue+0x6>
 228:	8e c0       	rjmp	.+284    	; 0x346 <DIO_enumSetPinValue+0x122>
 22a:	61 30       	cpi	r22, 0x01	; 1
 22c:	49 f1       	breq	.+82     	; 0x280 <DIO_enumSetPinValue+0x5c>
 22e:	38 f0       	brcs	.+14     	; 0x23e <DIO_enumSetPinValue+0x1a>
 230:	62 30       	cpi	r22, 0x02	; 2
 232:	09 f4       	brne	.+2      	; 0x236 <DIO_enumSetPinValue+0x12>
 234:	46 c0       	rjmp	.+140    	; 0x2c2 <DIO_enumSetPinValue+0x9e>
 236:	63 30       	cpi	r22, 0x03	; 3
 238:	09 f4       	brne	.+2      	; 0x23c <DIO_enumSetPinValue+0x18>
 23a:	64 c0       	rjmp	.+200    	; 0x304 <DIO_enumSetPinValue+0xe0>
 23c:	86 c0       	rjmp	.+268    	; 0x34a <DIO_enumSetPinValue+0x126>
 23e:	41 30       	cpi	r20, 0x01	; 1
 240:	71 f4       	brne	.+28     	; 0x25e <DIO_enumSetPinValue+0x3a>
 242:	4b b3       	in	r20, 0x1b	; 27
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	b9 01       	movw	r22, r18
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_enumSetPinValue+0x2c>
 24c:	66 0f       	add	r22, r22
 24e:	77 1f       	adc	r23, r23
 250:	8a 95       	dec	r24
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_enumSetPinValue+0x28>
 254:	cb 01       	movw	r24, r22
 256:	84 2b       	or	r24, r20
 258:	8b bb       	out	0x1b, r24	; 27
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
 25e:	41 11       	cpse	r20, r1
 260:	76 c0       	rjmp	.+236    	; 0x34e <DIO_enumSetPinValue+0x12a>
 262:	4b b3       	in	r20, 0x1b	; 27
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	b9 01       	movw	r22, r18
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_enumSetPinValue+0x4c>
 26c:	66 0f       	add	r22, r22
 26e:	77 1f       	adc	r23, r23
 270:	8a 95       	dec	r24
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_enumSetPinValue+0x48>
 274:	cb 01       	movw	r24, r22
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	8b bb       	out	0x1b, r24	; 27
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	08 95       	ret
 280:	41 30       	cpi	r20, 0x01	; 1
 282:	71 f4       	brne	.+28     	; 0x2a0 <DIO_enumSetPinValue+0x7c>
 284:	48 b3       	in	r20, 0x18	; 24
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_enumSetPinValue+0x6e>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_enumSetPinValue+0x6a>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	08 95       	ret
 2a0:	41 11       	cpse	r20, r1
 2a2:	57 c0       	rjmp	.+174    	; 0x352 <DIO_enumSetPinValue+0x12e>
 2a4:	48 b3       	in	r20, 0x18	; 24
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_enumSetPinValue+0x8e>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	8a 95       	dec	r24
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_enumSetPinValue+0x8a>
 2b6:	cb 01       	movw	r24, r22
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	08 95       	ret
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <DIO_enumSetPinValue+0xbe>
 2c6:	45 b3       	in	r20, 0x15	; 21
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_enumSetPinValue+0xb0>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_enumSetPinValue+0xac>
 2d8:	cb 01       	movw	r24, r22
 2da:	84 2b       	or	r24, r20
 2dc:	85 bb       	out	0x15, r24	; 21
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	08 95       	ret
 2e2:	41 11       	cpse	r20, r1
 2e4:	38 c0       	rjmp	.+112    	; 0x356 <DIO_enumSetPinValue+0x132>
 2e6:	45 b3       	in	r20, 0x15	; 21
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	b9 01       	movw	r22, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_enumSetPinValue+0xd0>
 2f0:	66 0f       	add	r22, r22
 2f2:	77 1f       	adc	r23, r23
 2f4:	8a 95       	dec	r24
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_enumSetPinValue+0xcc>
 2f8:	cb 01       	movw	r24, r22
 2fa:	80 95       	com	r24
 2fc:	84 23       	and	r24, r20
 2fe:	85 bb       	out	0x15, r24	; 21
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	71 f4       	brne	.+28     	; 0x324 <DIO_enumSetPinValue+0x100>
 308:	42 b3       	in	r20, 0x12	; 18
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_enumSetPinValue+0xf2>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_enumSetPinValue+0xee>
 31a:	cb 01       	movw	r24, r22
 31c:	84 2b       	or	r24, r20
 31e:	82 bb       	out	0x12, r24	; 18
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
 324:	41 11       	cpse	r20, r1
 326:	19 c0       	rjmp	.+50     	; 0x35a <DIO_enumSetPinValue+0x136>
 328:	42 b3       	in	r20, 0x12	; 18
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	b9 01       	movw	r22, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_enumSetPinValue+0x112>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	8a 95       	dec	r24
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_enumSetPinValue+0x10e>
 33a:	cb 01       	movw	r24, r22
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	82 bb       	out	0x12, r24	; 18
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	08 95       	ret
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	08 95       	ret

0000035e <DIO_enumGetPinValue>:
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
	if(( copy_u8PinNumber>=DIO_PIN0)&&( copy_u8PinNumber<=DIO_PIN7)){
 35e:	68 30       	cpi	r22, 0x08	; 8
 360:	c0 f5       	brcc	.+112    	; 0x3d2 <DIO_enumGetPinValue+0x74>
		switch(copy_u8PortName){
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	91 f0       	breq	.+36     	; 0x38a <DIO_enumGetPinValue+0x2c>
 366:	28 f0       	brcs	.+10     	; 0x372 <DIO_enumGetPinValue+0x14>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	d9 f0       	breq	.+54     	; 0x3a2 <DIO_enumGetPinValue+0x44>
 36c:	83 30       	cpi	r24, 0x03	; 3
 36e:	29 f1       	breq	.+74     	; 0x3ba <DIO_enumGetPinValue+0x5c>
 370:	32 c0       	rjmp	.+100    	; 0x3d6 <DIO_enumGetPinValue+0x78>
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
 372:	89 b3       	in	r24, 0x19	; 25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 c0       	rjmp	.+4      	; 0x37c <DIO_enumGetPinValue+0x1e>
 378:	95 95       	asr	r25
 37a:	87 95       	ror	r24
 37c:	6a 95       	dec	r22
 37e:	e2 f7       	brpl	.-8      	; 0x378 <DIO_enumGetPinValue+0x1a>
 380:	81 70       	andi	r24, 0x01	; 1
 382:	fa 01       	movw	r30, r20
 384:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 386:	80 e0       	ldi	r24, 0x00	; 0
	if(( copy_u8PinNumber>=DIO_PIN0)&&( copy_u8PinNumber<=DIO_PIN7)){
		switch(copy_u8PortName){
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
			break;
 388:	08 95       	ret
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
 38a:	86 b3       	in	r24, 0x16	; 22
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_enumGetPinValue+0x36>
 390:	95 95       	asr	r25
 392:	87 95       	ror	r24
 394:	6a 95       	dec	r22
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_enumGetPinValue+0x32>
 398:	81 70       	andi	r24, 0x01	; 1
 39a:	fa 01       	movw	r30, r20
 39c:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 39e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
			*copy_u8Ptr=GET_BIT(PINA_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
			break;
 3a0:	08 95       	ret
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
 3a2:	83 b3       	in	r24, 0x13	; 19
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_enumGetPinValue+0x4e>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_enumGetPinValue+0x4a>
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	fa 01       	movw	r30, r20
 3b4:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
			*copy_u8Ptr=GET_BIT(PINB_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
			break;
 3b8:	08 95       	ret
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
 3ba:	80 b3       	in	r24, 0x10	; 16
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_enumGetPinValue+0x66>
 3c0:	95 95       	asr	r25
 3c2:	87 95       	ror	r24
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_enumGetPinValue+0x62>
 3c8:	81 70       	andi	r24, 0x01	; 1
 3ca:	fa 01       	movw	r30, r20
 3cc:	80 83       	st	Z, r24
	}
	return LOC_enumState;
}
DIO_ErorrStatues DIO_enumGetPinValue(U8 copy_u8PortName,U8 copy_u8PinNumber,U8* copy_u8Ptr){
	DIO_ErorrStatues LOC_enumState;
	LOC_enumState=ok_state;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
			*copy_u8Ptr=GET_BIT(PINC_Reg, copy_u8PinNumber);
			break;
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
			break;
 3d0:	08 95       	ret
		default:
			LOC_enumState=dok_state;
			break;
		}
	}else{
		LOC_enumState=dok_state;
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	08 95       	ret
			break;
		case DIO_PORTD:
			*copy_u8Ptr=GET_BIT(PIND_Reg, copy_u8PinNumber);
			break;
		default:
			LOC_enumState=dok_state;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
		}
	}else{
		LOC_enumState=dok_state;
	}
	return LOC_enumState;
}
 3d8:	08 95       	ret

000003da <Kypad_init>:
                 ,{4,5,6,'*'}//r1
                 ,{1,2,3,'-'}//r2
                 ,{'c',0,'=','+'}/*r3*/};

void Kypad_init(void)
{
 3da:	cf 93       	push	r28
	for(U8 i=0;i<4;i++)
 3dc:	c0 e0       	ldi	r28, 0x00	; 0
 3de:	07 c0       	rjmp	.+14     	; 0x3ee <Kypad_init+0x14>
	{
		/*SET Direction of col----->input*/
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTC,DIO_INPUT);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	8c 0f       	add	r24, r28
 3e8:	0e 94 75 00 	call	0xea	; 0xea <DIO_enumSetPinDirection>
                 ,{1,2,3,'-'}//r2
                 ,{'c',0,'=','+'}/*r3*/};

void Kypad_init(void)
{
	for(U8 i=0;i<4;i++)
 3ec:	cf 5f       	subi	r28, 0xFF	; 255
 3ee:	c4 30       	cpi	r28, 0x04	; 4
 3f0:	b8 f3       	brcs	.-18     	; 0x3e0 <Kypad_init+0x6>
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	06 c0       	rjmp	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTC,DIO_INPUT);
	}
	for(U8 i=0;i<4;i++)
	{
		/*Set Direction of RW------->output*/
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTC,DIO_OUTPUT);
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	62 e0       	ldi	r22, 0x02	; 2
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 75 00 	call	0xea	; 0xea <DIO_enumSetPinDirection>
	for(U8 i=0;i<4;i++)
	{
		/*SET Direction of col----->input*/
		DIO_enumSetPinDirection(FIRSTCOL+i,DIO_PORTC,DIO_INPUT);
	}
	for(U8 i=0;i<4;i++)
 400:	cf 5f       	subi	r28, 0xFF	; 255
 402:	c4 30       	cpi	r28, 0x04	; 4
 404:	c0 f3       	brcs	.-16     	; 0x3f6 <Kypad_init+0x1c>
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	06 c0       	rjmp	.+12     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTC,DIO_OUTPUT);
	}
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of RW------->1*/
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTC,DIO_HIGH);
 40a:	41 e0       	ldi	r20, 0x01	; 1
 40c:	62 e0       	ldi	r22, 0x02	; 2
 40e:	8c 2f       	mov	r24, r28
 410:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
	for(U8 i=0;i<4;i++)
	{
		/*Set Direction of RW------->output*/
		DIO_enumSetPinDirection(FIRSTRW+i,DIO_PORTC,DIO_OUTPUT);
	}
	for(U8 i=0;i<4;i++)
 414:	cf 5f       	subi	r28, 0xFF	; 255
 416:	c4 30       	cpi	r28, 0x04	; 4
 418:	c0 f3       	brcs	.-16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTC,DIO_HIGH);
	}
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of COL------->Pull UP*/
		DIO_enumSetPinValue(FIRSTCOL+i,DIO_PORTC,DIO_HIGH);
 41e:	41 e0       	ldi	r20, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	84 e0       	ldi	r24, 0x04	; 4
 424:	8c 0f       	add	r24, r28
 426:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
	for(U8 i=0;i<4;i++)
	{
		/*SET Values of RW------->1*/
		DIO_enumSetPinValue(FIRSTRW+i,DIO_PORTC,DIO_HIGH);
	}
	for(U8 i=0;i<4;i++)
 42a:	cf 5f       	subi	r28, 0xFF	; 255
 42c:	c4 30       	cpi	r28, 0x04	; 4
 42e:	b8 f3       	brcs	.-18     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	{
		/*SET Values of COL------->Pull UP*/
		DIO_enumSetPinValue(FIRSTCOL+i,DIO_PORTC,DIO_HIGH);
	}

}
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <Kypad_GetKey>:
/*set any switch pressed&return this sw&loop 16 sw*/
U8   Kypad_GetKey(void)
{
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	1f 92       	push	r1
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
   U8 COLITERATION=0;
   U8 RWITERATION=0;
   U8 RETURN_VAL='f';
 444:	0f 2e       	mov	r0, r31
 446:	f6 e6       	ldi	r31, 0x66	; 102
 448:	ff 2e       	mov	r15, r31
 44a:	f0 2d       	mov	r31, r0
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
 44c:	00 e0       	ldi	r16, 0x00	; 0
 44e:	34 c0       	rjmp	.+104    	; 0x4b8 <Kypad_GetKey+0x84>
   {
	   DIO_enumSetPinValue(RWITERATION,DIO_PORTC,DIO_LOW);
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	80 2f       	mov	r24, r16
 456:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>

       for(COLITERATION=4;COLITERATION<8;COLITERATION++)
 45a:	14 e0       	ldi	r17, 0x04	; 4
 45c:	25 c0       	rjmp	.+74     	; 0x4a8 <Kypad_GetKey+0x74>
       {

    	   DIO_enumGetPinValue(DIO_PORTC,COLITERATION,&KEY_VAL);/*DIO GET PIN VALUE*/
 45e:	ae 01       	movw	r20, r28
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	61 2f       	mov	r22, r17
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 af 01 	call	0x35e	; 0x35e <DIO_enumGetPinValue>
    	   if(KEY_VAL==0)
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	81 11       	cpse	r24, r1
 470:	10 c0       	rjmp	.+32     	; 0x492 <Kypad_GetKey+0x5e>
    	   {
    		   RETURN_VAL=Key_arr[RWITERATION][COLITERATION-4];
 472:	80 2f       	mov	r24, r16
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	21 2f       	mov	r18, r17
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	24 50       	subi	r18, 0x04	; 4
 47c:	31 09       	sbc	r19, r1
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	80 5a       	subi	r24, 0xA0	; 160
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	fc 01       	movw	r30, r24
 48c:	e2 0f       	add	r30, r18
 48e:	f3 1f       	adc	r31, r19
 490:	f0 80       	ld	r15, Z
    	   }

    	   while(GET_BIT(PINC_Reg,COLITERATION)==0);
 492:	83 b3       	in	r24, 0x13	; 19
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 2e       	mov	r0, r17
 498:	02 c0       	rjmp	.+4      	; 0x49e <Kypad_GetKey+0x6a>
 49a:	95 95       	asr	r25
 49c:	87 95       	ror	r24
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <Kypad_GetKey+0x66>
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	f6 cf       	rjmp	.-20     	; 0x492 <Kypad_GetKey+0x5e>
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
   {
	   DIO_enumSetPinValue(RWITERATION,DIO_PORTC,DIO_LOW);

       for(COLITERATION=4;COLITERATION<8;COLITERATION++)
 4a6:	1f 5f       	subi	r17, 0xFF	; 255
 4a8:	18 30       	cpi	r17, 0x08	; 8
 4aa:	c8 f2       	brcs	.-78     	; 0x45e <Kypad_GetKey+0x2a>
    		   RETURN_VAL=Key_arr[RWITERATION][COLITERATION-4];
    	   }

    	   while(GET_BIT(PINC_Reg,COLITERATION)==0);
       }
       DIO_enumSetPinValue(RWITERATION,DIO_PORTC,DIO_HIGH);
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	62 e0       	ldi	r22, 0x02	; 2
 4b0:	80 2f       	mov	r24, r16
 4b2:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
{
   U8 COLITERATION=0;
   U8 RWITERATION=0;
   U8 RETURN_VAL='f';
   U8 KEY_VAL;
   for(RWITERATION=0;RWITERATION<4;RWITERATION++)
 4b6:	0f 5f       	subi	r16, 0xFF	; 255
 4b8:	04 30       	cpi	r16, 0x04	; 4
 4ba:	50 f2       	brcs	.-108    	; 0x450 <Kypad_GetKey+0x1c>
   }


return RETURN_VAL;

}
 4bc:	8f 2d       	mov	r24, r15
 4be:	0f 90       	pop	r0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	08 95       	ret

000004cc <get_choise>:
U8 get_choise(void)
{   
	U8 choise='f';
	  do
	  {
		  choise=Kypad_GetKey();
 4cc:	0e 94 1a 02 	call	0x434	; 0x434 <Kypad_GetKey>
	  }	while(choise=='f');
 4d0:	86 36       	cpi	r24, 0x66	; 102
 4d2:	e1 f3       	breq	.-8      	; 0x4cc <get_choise>
	return choise;
}
 4d4:	08 95       	ret

000004d6 <main>:

U8 get_choise(void);

int main ()
{
	Kypad_init();
 4d6:	0e 94 ed 01 	call	0x3da	; 0x3da <Kypad_init>
	USART_voidINIT();
 4da:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <USART_voidINIT>
		
	DIO_enumSetPortDirection(DIO_PORTB,255);
 4de:	6f ef       	ldi	r22, 0xFF	; 255
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_enumSetPortDirection>
	DIO_enumSetPortValue(DIO_PORTB,0);
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	0e 94 5f 00 	call	0xbe	; 0xbe <DIO_enumSetPortValue>
	
	DIO_enumSetPinDirection(DIO_PIN0,DIO_PORTD,DIO_INPUT);
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	63 e0       	ldi	r22, 0x03	; 3
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	0e 94 75 00 	call	0xea	; 0xea <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(DIO_PIN1,DIO_PORTD,DIO_OUTPUT);
 4f8:	41 e0       	ldi	r20, 0x01	; 1
 4fa:	63 e0       	ldi	r22, 0x03	; 3
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	0e 94 75 00 	call	0xea	; 0xea <DIO_enumSetPinDirection>
	USART_VoidSendString("\r\n******************************\r\n");
 502:	84 e7       	ldi	r24, 0x74	; 116
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
	USART_VoidSendString("Welcome! \r\n");
 50a:	87 e9       	ldi	r24, 0x97	; 151
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 512:	2f e3       	ldi	r18, 0x3F	; 63
 514:	8d e0       	ldi	r24, 0x0D	; 13
 516:	93 e0       	ldi	r25, 0x03	; 3
 518:	21 50       	subi	r18, 0x01	; 1
 51a:	80 40       	sbci	r24, 0x00	; 0
 51c:	90 40       	sbci	r25, 0x00	; 0
 51e:	e1 f7       	brne	.-8      	; 0x518 <main+0x42>
 520:	00 c0       	rjmp	.+0      	; 0x522 <main+0x4c>
 522:	00 00       	nop
	_delay_ms(1000);
	USART_VoidSendString("Enter Your ID: ");
 524:	83 ea       	ldi	r24, 0xA3	; 163
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
	id=get_choise();
 52c:	0e 94 66 02 	call	0x4cc	; 0x4cc <get_choise>
 530:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <id>
     USART_voidTRANSMITR(id+48);
 534:	80 5d       	subi	r24, 0xD0	; 208
 536:	0e 94 86 03 	call	0x70c	; 0x70c <USART_voidTRANSMITR>
		
	if(id!=id1&&id!=id2)
 53a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <id>
 53e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <id1>
 542:	89 17       	cp	r24, r25
 544:	09 f4       	brne	.+2      	; 0x548 <main+0x72>
 546:	cc c0       	rjmp	.+408    	; 0x6e0 <main+0x20a>
 548:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <id2>
 54c:	89 17       	cp	r24, r25
 54e:	09 f4       	brne	.+2      	; 0x552 <main+0x7c>
 550:	c7 c0       	rjmp	.+398    	; 0x6e0 <main+0x20a>
	{
		USART_VoidSendString("System Closed");
 552:	83 eb       	ldi	r24, 0xB3	; 179
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
 55a:	c7 c0       	rjmp	.+398    	; 0x6ea <main+0x214>
	}
	else{

	while(i<3)
	{
		i++;
 55c:	8f 5f       	subi	r24, 0xFF	; 255
 55e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <i>
		USART_VoidSendString("\r\nEnter Password: ");
 562:	81 ec       	ldi	r24, 0xC1	; 193
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
		p=get_choise();
 56a:	0e 94 66 02 	call	0x4cc	; 0x4cc <get_choise>
 56e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <p>
		USART_VoidSendString("*\r\n ");
 572:	84 ed       	ldi	r24, 0xD4	; 212
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
		if(!((id==id1&&p==p1)||(id==id2&&p==p2)))
 57a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <id>
 57e:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <id1>
 582:	89 13       	cpse	r24, r25
 584:	06 c0       	rjmp	.+12     	; 0x592 <main+0xbc>
 586:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <p>
 58a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <p1>
 58e:	29 17       	cp	r18, r25
 590:	a1 f0       	breq	.+40     	; 0x5ba <main+0xe4>
 592:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <id2>
 596:	89 13       	cpse	r24, r25
 598:	06 c0       	rjmp	.+12     	; 0x5a6 <main+0xd0>
 59a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <p>
 59e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <p2>
 5a2:	98 17       	cp	r25, r24
 5a4:	51 f0       	breq	.+20     	; 0x5ba <main+0xe4>
		{
		USART_VoidSendString("\r\nTry : ");
 5a6:	89 ed       	ldi	r24, 0xD9	; 217
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
		USART_voidTRANSMITR(48+4-i);
 5ae:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <i>
 5b2:	84 e3       	ldi	r24, 0x34	; 52
 5b4:	89 1b       	sub	r24, r25
 5b6:	0e 94 86 03 	call	0x70c	; 0x70c <USART_voidTRANSMITR>
		}
		USART_VoidSendString("\r\n******************************\r\n");
 5ba:	84 e7       	ldi	r24, 0x74	; 116
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
	
		if((id==id1&&p==p1)||(id==id2&&p==p2))
 5c2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <id>
 5c6:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <id1>
 5ca:	89 13       	cpse	r24, r25
 5cc:	06 c0       	rjmp	.+12     	; 0x5da <main+0x104>
 5ce:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <p>
 5d2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <p1>
 5d6:	29 17       	cp	r18, r25
 5d8:	51 f0       	breq	.+20     	; 0x5ee <main+0x118>
 5da:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <id2>
 5de:	89 13       	cpse	r24, r25
 5e0:	7f c0       	rjmp	.+254    	; 0x6e0 <main+0x20a>
 5e2:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <p>
 5e6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <p2>
 5ea:	98 13       	cpse	r25, r24
 5ec:	79 c0       	rjmp	.+242    	; 0x6e0 <main+0x20a>
		{
			while(1)
			{
				USART_VoidSendString("\r\n******************************\r\n");
 5ee:	84 e7       	ldi	r24, 0x74	; 116
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
				
				/*********************************ROOM****************************/

				USART_VoidSendString(" 1 : ROOM 1\r\n");
 5f6:	82 ee       	ldi	r24, 0xE2	; 226
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
				USART_VoidSendString(" 2 : ROOM 2\r\n");
 5fe:	80 ef       	ldi	r24, 0xF0	; 240
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
				/*********************************ROOM****************************/
				room=get_choise();
 606:	0e 94 66 02 	call	0x4cc	; 0x4cc <get_choise>
 60a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <room>
		
			    /*********************************device****************************/

			     USART_VoidSendString(" 1 : LED \r\n");
 60e:	8e ef       	ldi	r24, 0xFE	; 254
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
			     USART_VoidSendString(" 2 : FAN\r\n");
 616:	8a e0       	ldi	r24, 0x0A	; 10
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
			    /*********************************device****************************/
				device=get_choise();
 61e:	0e 94 66 02 	call	0x4cc	; 0x4cc <get_choise>
 622:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <device>
			    /*********************************Action****************************/

			    USART_VoidSendString(" 1 : ON \r\n");
 626:	85 e1       	ldi	r24, 0x15	; 21
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
			    USART_VoidSendString(" 2 : OFF\r\n");
 62e:	80 e2       	ldi	r24, 0x20	; 32
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
			    /*********************************Action****************************/
				action=get_choise();
 636:	0e 94 66 02 	call	0x4cc	; 0x4cc <get_choise>
 63a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end>
				
				switch(room)
 63e:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <room>
 642:	91 30       	cpi	r25, 0x01	; 1
 644:	19 f0       	breq	.+6      	; 0x64c <main+0x176>
 646:	92 30       	cpi	r25, 0x02	; 2
 648:	31 f1       	breq	.+76     	; 0x696 <main+0x1c0>
 64a:	d1 cf       	rjmp	.-94     	; 0x5ee <main+0x118>
				{
					/***********************************ROOM1*************************/
					case 1:
					{
						if (device==1&&action==1)
 64c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <device>
 650:	91 30       	cpi	r25, 0x01	; 1
 652:	39 f4       	brne	.+14     	; 0x662 <main+0x18c>
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	29 f4       	brne	.+10     	; 0x662 <main+0x18c>
						{
							DIO_enumSetPinValue(DIO_PIN1,DIO_PORTB,DIO_HIGH);
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 660:	c6 cf       	rjmp	.-116    	; 0x5ee <main+0x118>
						}
						else if (device==2&&action==1)
 662:	92 30       	cpi	r25, 0x02	; 2
 664:	41 f4       	brne	.+16     	; 0x676 <main+0x1a0>
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	31 f4       	brne	.+12     	; 0x676 <main+0x1a0>
						{
							DIO_enumSetPinValue(DIO_PIN0,DIO_PORTB,DIO_HIGH);
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	61 e0       	ldi	r22, 0x01	; 1
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 674:	bc cf       	rjmp	.-136    	; 0x5ee <main+0x118>
						}
						else if (device==1&&action==2)
 676:	91 30       	cpi	r25, 0x01	; 1
 678:	41 f4       	brne	.+16     	; 0x68a <main+0x1b4>
 67a:	82 30       	cpi	r24, 0x02	; 2
 67c:	31 f4       	brne	.+12     	; 0x68a <main+0x1b4>
						{
							DIO_enumSetPinValue(DIO_PIN1,DIO_PORTB,DIO_LOW);
 67e:	40 e0       	ldi	r20, 0x00	; 0
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 688:	b2 cf       	rjmp	.-156    	; 0x5ee <main+0x118>
						}
						else
						{
							DIO_enumSetPinValue(DIO_PIN0,DIO_PORTB,DIO_LOW);
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 694:	ac cf       	rjmp	.-168    	; 0x5ee <main+0x118>
						
					}break;
					/***********************************ROOM2*************************/
					case 2:
					{
						if (device==1&&action==1)
 696:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <device>
 69a:	91 30       	cpi	r25, 0x01	; 1
 69c:	41 f4       	brne	.+16     	; 0x6ae <main+0x1d8>
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	31 f4       	brne	.+12     	; 0x6ae <main+0x1d8>
						{
							DIO_enumSetPinValue(DIO_PIN2,DIO_PORTB,DIO_HIGH);
 6a2:	41 e0       	ldi	r20, 0x01	; 1
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 6ac:	a0 cf       	rjmp	.-192    	; 0x5ee <main+0x118>
						}
						else if (device==2&&action==1)
 6ae:	92 30       	cpi	r25, 0x02	; 2
 6b0:	41 f4       	brne	.+16     	; 0x6c2 <main+0x1ec>
 6b2:	81 30       	cpi	r24, 0x01	; 1
 6b4:	31 f4       	brne	.+12     	; 0x6c2 <main+0x1ec>
						{
							DIO_enumSetPinValue(DIO_PIN3,DIO_PORTB,DIO_HIGH);
 6b6:	41 e0       	ldi	r20, 0x01	; 1
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	83 e0       	ldi	r24, 0x03	; 3
 6bc:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 6c0:	96 cf       	rjmp	.-212    	; 0x5ee <main+0x118>
						}
						else if (device==1&&action==2)
 6c2:	91 30       	cpi	r25, 0x01	; 1
 6c4:	39 f4       	brne	.+14     	; 0x6d4 <main+0x1fe>
 6c6:	82 30       	cpi	r24, 0x02	; 2
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <main+0x1fe>
						{
							DIO_enumSetPinValue(DIO_PIN2,DIO_PORTB,DIO_LOW);
 6ca:	40 e0       	ldi	r20, 0x00	; 0
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 6d2:	8d cf       	rjmp	.-230    	; 0x5ee <main+0x118>
						}
						else
						{
							DIO_enumSetPinValue(DIO_PIN3,DIO_PORTB,DIO_LOW);
 6d4:	40 e0       	ldi	r20, 0x00	; 0
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	83 e0       	ldi	r24, 0x03	; 3
 6da:	0e 94 12 01 	call	0x224	; 0x224 <DIO_enumSetPinValue>
 6de:	87 cf       	rjmp	.-242    	; 0x5ee <main+0x118>
	{
		USART_VoidSendString("System Closed");
	}
	else{

	while(i<3)
 6e0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <i>
 6e4:	83 30       	cpi	r24, 0x03	; 3
 6e6:	08 f4       	brcc	.+2      	; 0x6ea <main+0x214>
 6e8:	39 cf       	rjmp	.-398    	; 0x55c <main+0x86>
	   }
	}
			
		}
		
		USART_VoidSendString("\r\n System Closed !!");	
 6ea:	8b e2       	ldi	r24, 0x2B	; 43
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 8a 03 	call	0x714	; 0x714 <USART_VoidSendString>
	}
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	08 95       	ret

000006f8 <USART_voidINIT>:

U8   USART_u8RECIVER(void){
	//u8 DATA=UDR;
	while(GET_BIT(UCSRA,7)==0){};
	return UDR;
}
 6f8:	80 e2       	ldi	r24, 0x20	; 32
 6fa:	8b b9       	out	0x0b, r24	; 11
 6fc:	88 e3       	ldi	r24, 0x38	; 56
 6fe:	8a b9       	out	0x0a, r24	; 10
 700:	86 e8       	ldi	r24, 0x86	; 134
 702:	80 bd       	out	0x20, r24	; 32
 704:	83 e3       	ldi	r24, 0x33	; 51
 706:	89 b9       	out	0x09, r24	; 9
 708:	10 bc       	out	0x20, r1	; 32
 70a:	08 95       	ret

0000070c <USART_voidTRANSMITR>:
 70c:	8c b9       	out	0x0c, r24	; 12
 70e:	5d 9b       	sbis	0x0b, 5	; 11
 710:	fe cf       	rjmp	.-4      	; 0x70e <USART_voidTRANSMITR+0x2>
 712:	08 95       	ret

00000714 <USART_VoidSendString>:

void USART_VoidSendString(U8 *COPYu8StringPtr){
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	cf 93       	push	r28
 71a:	8c 01       	movw	r16, r24
	U8 LOC_u8Itterator=0;
 71c:	c0 e0       	ldi	r28, 0x00	; 0
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){
 71e:	03 c0       	rjmp	.+6      	; 0x726 <USART_VoidSendString+0x12>

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
 720:	0e 94 86 03 	call	0x70c	; 0x70c <USART_voidTRANSMITR>
		LOC_u8Itterator=LOC_u8Itterator+1;
 724:	cf 5f       	subi	r28, 0xFF	; 255
	return UDR;
}

void USART_VoidSendString(U8 *COPYu8StringPtr){
	U8 LOC_u8Itterator=0;
	while(COPYu8StringPtr[LOC_u8Itterator]!='\0'){
 726:	f8 01       	movw	r30, r16
 728:	ec 0f       	add	r30, r28
 72a:	f1 1d       	adc	r31, r1
 72c:	80 81       	ld	r24, Z
 72e:	81 11       	cpse	r24, r1
 730:	f7 cf       	rjmp	.-18     	; 0x720 <USART_VoidSendString+0xc>

		USART_voidTRANSMITR(COPYu8StringPtr[LOC_u8Itterator]);
		LOC_u8Itterator=LOC_u8Itterator+1;
	}

}
 732:	cf 91       	pop	r28
 734:	1f 91       	pop	r17
 736:	0f 91       	pop	r16
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
